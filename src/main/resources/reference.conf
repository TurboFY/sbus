akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
}

sbus {
  package-to-scan = "com.sbuslab"

  auth {
    enabled = true
    required = false

    name = "my-service"
    private-key = "my-private-key"
    public-keys = { }

    consul {
      base-url = "https://consul.yournet/v1/kv/"
      public-keys-path = "services/keys/public/"
      identities-path = "sbus/rbac/identities/"
      config-path = "services/sbus/auth/config/my-service"
      timeout = "10 minutes"
    }

    rbac {
      identities = {
        "users/joe.bloggs": [
          "devs"
        ]
        "users/sarah.dene": [
          "support"
        ]
        "services/other-service": [
          "services"
        ]
      }
      actions = {
        "*": ["*"]
        "users.create-user": ["devs", "services", "users/sarah.dene"]
        "users.delete-user": ["devs"]
      }
    }
  }

  transports {
    dispatcher {
      default = rabbitmq
      // events    = kafka
      // broadcast = kafka
    }

    rabbitmq {
      host = "localhost"
      port = 5672
      username = "guest"
      password = "guest"

      prefetch-count = 64
      default-command-retries = 15
      default-timeout = 12 seconds
      shutdown-timeout = 3 seconds

      pretty-json = false
      log-trim-length = 1024
      unlogged-requests = []
      subscription-whitelist = []

      circuit-breaker {
        enabled = false
        max-failures = 64
        reset-timeout = 5 seconds
      }

      channels {
        default {
          exchange = "sbus.common"
          exchange-type = "direct"

          queue-name = "%s"
          durable = false
          exclusive = false
          autodelete = false
          mandatory = true
          heartbeat = false
          routing-keys = []    # optional, by default get from subscriptionName
        }

        events {
          exchange = "sbus.events"
          exchange-type = "topic"
          mandatory = false
          heartbeat = true
        }

        broadcast = ${sbus.transports.rabbitmq.channels.events} {
          queue-name = ""
          exclusive = true
          autodelete = true
        }
      }
    }

    kafka {

    }
  }
}
